{
    "contents" : "# Run this code and inspect the output. Follow the link in the instructions for the interactive version\nfaithful %>% \n      ggvis(~waiting, ~eruptions, fillOpacity := 0.5, \n            shape := input_select(label = \"Choose shape:\", \n                                  choices = c(\"circle\", \"square\", \"cross\", \"diamond\", \n                                              \"triangle-up\", \"triangle-down\"))) %>% \n      layer_points()\n\n# Copy the first code chunk and alter the code to make the fill property interactive using a select box\nfaithful %>% \n      ggvis(~waiting, ~eruptions, fillOpacity := 0.5, \n            shape := input_select(label = \"Choose shape:\", \n                                  choices = c(\"circle\", \"square\", \"cross\", \"diamond\", \n                                              \"triangle-up\", \"triangle-down\")),\n            fill := input_select(label = \"Choose color:\",\n                                 choices = c(\"black\",\"red\",\"blue\",\"green\"))) %>% \n      layer_points()\n\n\n# Add radio buttons to control the fill of the plot\nmtcars %>% \n      ggvis(~mpg, ~wt,\n            fill := input_radiobuttons(\"input\",\n                                 label = \"Choose color:\"\n                                 ,choices = c(\"black\",\"red\",\"blue\",\"green\"))) %>% \n      layer_points()\n\n\n\n#--------------------------------------------------\n\n# Change the radiobuttons widget to a text widget \nmtcars %>% \n      ggvis(~mpg, ~wt, \n            fill := input_text(\"black\",label = \"Choose color:\")) %>% \n      layer_points()\n\n# Map the fill property to a select box that returns variable names\nmtcars %>% \n      ggvis(~mpg, ~wt,\n            fill=input_select(label=\"Choose fill variable:\",\n                               choices = names(mtcars),\n                               map = as.name)) %>% \n      layer_points()\n\n\n#--------------------------------------------------------\n\n# Map the bindwidth to a numeric field (\"Choose a binwidth:\")\nmtcars %>% \n      ggvis(~mpg,\n            width = input_numeric(id = \"width\",\n                                  label=\"Choose a binwidth:\",\n                                  value = 1)) %>% \n      layer_histograms()\n\n# Map the binwidth to a slider bar (\"Choose a binwidth:\") with the correct specifications\nmtcars %>% \n      ggvis(~mpg,\n            width = input_slider(1,20,\n                                 label = \"Choose a binwidth\")) %>% \n      layer_histograms()\n\n#------------------------------------------------------------------\n\n# Add a layer of points to the graph below.\npressure %>% \n      ggvis(~temperature, ~pressure, stroke := \"skyblue\") %>% \n      layer_lines() %>%\n      layer_points()\n\n# Copy and adapt the solution to the first instruction below so that only the lines layer uses a skyblue stroke.\npressure %>% \n      ggvis(~temperature, ~pressure ) %>% \n      layer_lines(stroke := \"skyblue\") %>%\n      layer_points()\n\n# Rewrite the code below so that only the points layer uses the shape property.\npressure %>% \n      ggvis(~temperature, ~pressure) %>% \n      layer_lines(stroke := \"skyblue\") %>% \n      layer_points(shape := \"triangle-up\")\n\n# Refactor the code for the graph below to make it as concise as possible\npressure %>% \n      ggvis(~temperature, ~pressure, \n            strokeOpacity := 0.5,\n            stroke := \"skyblue\",\n            strokeWidth := 5) %>% \n      layer_lines() %>% \n      layer_points( fill = ~temperature, \n                    shape := \"triangle-up\", \n                    size := 300)\n\n\n\n\n#------------------------------------------------------------\n# Create a graph containing a scatterplot, a linear model and a smooth line.\n\n\npressure %>% ggvis(~temperature,~pressure) %>%\n      layer_points()%>%\n      layer_lines(stroke:=\"black\",\n                  opacity := 0.5)%>%\n      layer_model_predictions(model=\"lm\",\n                              stroke:=\"navy\")%>%\n      layer_smooths(stroke:=\"skyblue\")\n\n#---------------------------------------------------------------\npressure %>% \n      ggvis(~temperature, ~pressure, stroke := \"darkred\") %>% \n      layer_lines( strokeDash := 5, strokeWidth := 5) %>% \n      layer_points(size := 100, fill := \"lightgreen\",shape := \"circle\") %>%\n      layer_smooths()\n\n#----------------------------------------------------------------\n# add the title of the x axis: \"Time since previous eruption (m)\"\nfaithful %>% \n      ggvis(~waiting, ~eruptions) %>% \n      layer_points() %>% \n      add_axis(\"y\", title = \"Duration of eruption (m)\")%>%\n      add_axis(\"x\", title = \"Time since previous eruption (m)\")\n\n# Add to the code to place a labelled tick mark at 50, 60, 70, 80, 90 on the x axis.\nfaithful %>% \n      ggvis(~waiting, ~eruptions) %>% \n      layer_points() %>% \n      add_axis(\"y\", title = \"Duration of eruption (m)\", \n               values = c(2, 3, 4, 5), subdivide = 9) %>% \n      add_axis(\"x\", title = \"Time since previous eruption (m)\",\n               values = c(50,60,70,80,90), subdivide = 9)\n\n# Change the code below to change the axes' locations\nfaithful %>% \n      ggvis(~waiting, ~eruptions) %>% \n      layer_points()%>%\n      add_axis(\"x\",orient=\"top\")%>%\n      add_axis(\"y\",orient=\"right\")\n\n\n\n\n#-----------------------------------------------------\n# Add a legend to the plot below: use the correct title and orientation\nfaithful %>% \n      ggvis(~waiting, ~eruptions, opacity := 0.6, \n            fill = ~factor(round(eruptions))) %>% \n      layer_points()%>%\n      add_legend(\"title\",title=\"~duration (m)\", orient=\"left\")\n\n# Use add_legend() to combine the legends in the plot below. Adjust its properties as instructed.\nfaithful %>% \n      ggvis(~waiting, ~eruptions, opacity := 0.6, \n            fill = ~factor(round(eruptions)), shape = ~factor(round(eruptions)), \n            size = ~round(eruptions))  %>%\n      layer_points()%>%\n      add_legend(c(\"fill\",\"shape\",\"size\"),\n                 title=\"~duration (m)\",values=c(2,3,4,5))\n\n\n# Add a legend to the plot below: use the correct title and orientation\nfaithful %>% \n      ggvis(~waiting, ~eruptions, opacity := 0.6, \n            fill = ~factor(round(eruptions))) %>% \n      layer_points() %>% \n      add_legend(\"fill\", title = \"~ duration (m)\", orient = \"left\")\n\n# Use add_legend() to combine the legends in the plot below. Adjust its properties as instructed.\nfaithful %>% \n      ggvis(~waiting, ~eruptions, opacity := 0.6, \n            fill = ~factor(round(eruptions)), shape = ~factor(round(eruptions)), \n            size = ~round(eruptions)) %>% \n      layer_points() %>% \n      add_legend(c(\"fill\", \"shape\", \"size\"), \n                 title = \"~ duration (m)\", values = c(2, 3, 4, 5))\n\n\n\n\n\n# Add a scale_numeric() function to the code below to make the stroke color range from \"darkred\" to \"orange\".\nmtcars %>% \n      ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%\n      layer_points() %>%\n      scale_numeric(\"fill\", range = c(\"red\", \"yellow\"))%>%\n      scale_numeric(\"stroke\", range=c(\"darkred\",\"orange\"))\n\n# Change the graph below to make the fill colors range from green to beige.\nmtcars %>% ggvis(~wt, ~mpg, fill = ~hp) %>%\n      layer_points() %>%\n      scale_numeric(\"fill\",range=c(\"green\",\"beige\"))\n\n# Create a scale that will map factor(cyl) to a new range of colors: purple, blue, and green. \nmtcars %>% ggvis(~wt, ~mpg, fill = ~factor(cyl)) %>%\n      layer_points()%>%\n      scale_nominal(\"fill\",range=c(\"purple\",\"blue\",\"green\"))\n\n\n\n\n# Add a scale that limits the range of opacity from 0.2 to 1. \nmtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%\n      layer_points()%>%\n      scale_numeric(\"opacity\",range=c(0.2,1))\n\n# Add a second scale that will expand the x axis to cover data values from 0 to 6.\nmtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%\n      layer_points() %>%\n      scale_numeric(\"y\", domain = c(0, NA))%>%\n      scale_numeric(\"x\",domain=c(0,6))\n\n\n\n# Set the fill value to the color variable instead of mapping it, and see what happens\nmtcars$color <- c(\"red\", \"teal\", \"#cccccc\", \"tan\")\nmtcars %>% ggvis(x = ~wt, y = ~mpg, fill = color) %>% layer_points()\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1454908066113.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "368818191",
    "id" : "7ECF6752",
    "lastKnownWriteTime" : 1454916957,
    "path" : "F:/sanjana/books/CSE/Machine Learning/Data Camp/Practice/Datacamp-courses/Data Visualization using ggvis/interactive_plots.R",
    "project_path" : "interactive_plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}