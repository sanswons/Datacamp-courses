{
    "contents" : "\n# ggvis is already installed for you; now load it and start playing around\ninstall.packages(\"ggvis\")\nlibrary(ggvis)\n# change the code below to plot the disp variable of mtcars on the x axis\nmtcars %>% ggvis(~disp, ~mpg) %>% layer_points()\n\n\n# The ggvis packages is loaded into the workspace already\n\n# Change the code below to make a graph with red points\nmtcars %>% ggvis(~wt, ~mpg, fill := \"red\") %>% layer_points()\n\n# Change the code below draw smooths instead of points\nmtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()\n\n# Change the code below to make a graph containing both points and a smoothed summary line\nmtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()\n\n\n# Make a scatterplot of the pressure dataset\npressure %>% ggvis(~temperature, ~pressure) %>% layer_points()\n\n# Adapt the code you wrote for the first challenge: show bars instead of points\npressure %>% ggvis(~temperature, ~pressure) %>% layer_bars()\n\n# Adapt the code you wrote for the first challenge: show lines instead of points\npressure %>% ggvis(~temperature, ~pressure) %>% layer_lines()\n\n# Adapt the code you wrote for the first challenge: map the fill property to the temperature variable\npressure %>% ggvis(~temperature, ~pressure, fill = \"temperature\") %>% layer_points() \n\n# Extend the code you wrote for the previous challenge: map the size property to the pressure variable\npressure %>% ggvis(~temperature, ~pressure, fill = \"temperature\", size = \"pressure\") %>% layer_points()\n\n\n# Rewrite the code with the pipe operator     \nlayer_points(ggvis(faithful, ~waiting, ~eruptions))\nfaithful %>% ggvis(~waiting, ~eruptions) %>% layer_points()\n\n# Modify this graph to map the size property to the pressure variable\npressure %>% ggvis(~temperature, ~pressure, size = \"pressure\") %>% layer_points()\n\n# Modify this graph by setting the size property\npressure %>% ggvis(~temperature, ~pressure, size := 100 ) %>% layer_points()\n\n# Fix this code to set the fill property to red\npressure %>% ggvis(~temperature, ~pressure, fill := \"red\") %>% layer_points()\n\n\n# Change the code to set the fills using pressure$black. pressure$black is loaded into workspace.\npressure$black = c(\"black\"  ,      \"grey80\",       \"grey50\"  ,     \"navyblue\" ,    \"blue\" ,       \n \"springgreen4\" ,\"green4\"   ,    \"green\"  ,      \"yellowgreen\" , \"yellow\",    \n \"orange\"    ,   \"darkorange\"  , \"orangered\"  ,  \"red\"        ,  \"magenta\"     ,\n\"violet\"      , \"purple\",       \"purple4\"    ,  \"slateblue\"   )\npressure %>%  ggvis(~temperature, ~pressure, fill := ~black) %>%  layer_points()\n\n# Plot the faithful data as described in the second instruction\nfaithful %>% ggvis(~waiting, ~eruptions, size = ~eruptions, opacity := 0.5, fill := \"blue\", stroke := \"black\") %>% layer_points()\n\n# Plot the faithful data as described in the third instruction\nfaithful %>% ggvis(~waiting, ~eruptions, stroke := \"red\",size := 100, fillOpacity = ~eruptions, fill := \"red\", shape := \"cross\") %>% layer_points()\n\n\n# Change the code below to use the lines mark\npressure %>% ggvis(~temperature, ~pressure) %>% layer_lines()\n\n# Set the properties described in the second instruction in the graph below\npressure %>% ggvis(~temperature, ~pressure,strokeWidth := 2,stroke := \"red\", strokeDash := 6) %>% layer_lines()\n\n\n# change the third line of code to plot a map of Texas\nlibrary(\"maps\")\ntexas <- ggplot2::map_data(\"state\", region = \"texas\")\ntexas %>% ggvis(~long, ~lat) %>% layer_paths()\n\n# Same plot, but set the fill property of the texas map to dark orange\ntexas %>% ggvis(~long, ~lat, fill := \"darkorange\") %>% layer_paths()\n\n\n\n\n#compute_model_prediction() is a useful function to use with line graphs.\n#It takes a data frame as input and returns a new data frame as output.\n#The new data frame will contain the x and y values of a line fitted to the\n#data in the original data frame.\n\nfaithful %>% compute_model_prediction(eruptions ~ waiting, model = \"lm\")\n\n# Notice that compute_model_prediction() takes a couple of arguments. First\n# we use the pipe operator to pass it the data set faithful. Then we provide\n# an R formula, eruptions ~ waiting. An R formula contains two variables\n# connected by a tilde, ~. compute_model_prediction() will use the variable\n# on the left as the y variable for the line, and it will use the variable \n# on the right as the x variable for the line.\n\n# Finally, compute_model_prediction() takes a model argument. This is the \n# name of the R modelling function that compute_model_prediction() should\n# use to calculate the line. lm() is Rs function for building linear models.\n# compute_smooth() is a special case of compute_model_prediction() where the\n# model argument is set to loess by default. In this case the function will\n# create a smoothed set of points.\n\n# Compute the x and y coordinates for a loess smooth line that predicts mpg with the wt\nmtcars %>% compute_smooth(mpg ~ wt)\n\n\n\n\n#Using the %>% operator, extend the code on the right which you created in the last exercise \n#to plot the results of compute_smooth() with the lines mark. The plot should place pred_ on\n#the x axis and resp_ on the y axis\n\n\n# Use 'ggvis()' and 'layer_lines()' to plot the results of compute smooth\nmtcars %>% compute_smooth(mpg ~ wt) %>% ggvis(~pred_, ~resp_) %>% layer_lines()\n\n# Recreate the graph you coded above with 'ggvis()' and 'layer_smooths()' \nmtcars %>% ggvis(~wt, ~mpg )%>% layer_smooths()\n\n# Extend the code for the second plot and add 'layer_points()' to the graph\nmtcars %>% ggvis( ~wt ,~mpg )%>% layer_points() %>% layer_smooths()\n\n\n\n\n\n",
    "created" : 1454299190114.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2188171699",
    "id" : "3B0A9187",
    "lastKnownWriteTime" : 1454902373,
    "path" : "F:/sanjana/books/CSE/Machine Learning/Data Camp/Practice/Datacamp-courses/Data Visualization using ggvis/plots.R",
    "project_path" : "plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}