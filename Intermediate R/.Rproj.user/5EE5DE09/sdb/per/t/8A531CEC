{
    "contents" : "# The vector pioneers has already been created for you\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\n\n# Split names from birth year: split_math\nsplit_math = strsplit(pioneers,split = \":\")\n\n# Convert to lowercase strings: split_low\nsplit_low=lapply(split_math, tolower)\n\n# Take a look at the structure of split_low\nstr(split_low)\n\n\n\n# Code from previous exercise:\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Write function select_first()\nselect_first = function(x){\n      return(x[1])\n}\n\n# Apply select_first() over split_low: names\nnames = lapply(split_low, select_first)\n\n# Write function select_second()\nselect_second = function(x){\n      return(x[2])\n}\n\n# Apply select_second() over split_low: years\nyears = lapply(split_low, select_second)\n\n\n\n\n# Definition of split_low\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, function(x){x[1]})\nsplit_low\nnames <- lapply(split, function(x){x[2]})\nnames\n\n\n# Definition of split_low\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Replace the select_*() functions by a single function: select_el\nselect_el = function(v, index){\n      v[index]\n}\n# Call the select_el() function twice on split_low: names and years\nnames =lapply(split_low, select_el, 1)\nyears = lapply(split_low, select_el, 2)\nnames\nyears\n\n\n# temp has already been defined in the workspace\n\n# Use lapply() to find each day's minimum temperature\nlapply(temp,min)\n\n# Use sapply() to find each day's minimum temperature\nsapply(temp,min)\n\n# Use lapply() to find each day's maximum temperature\nlapply(temp,max)\n\n# Use sapply() to find each day's maximum temperature\nsapply(temp,max)\n\n\n\n# temp is already defined in the workspace\n\n# Define a function calculates the average of the min and max of a vector: extremes_avg\nextremes_avg = function(v1){\n      average = (min(v1)+max(v1))/2\n}\n\n\n\n# Apply extremes_avg() over temp using sapply()\nsapply(temp, extremes_avg)\n\n# Apply extremes_avg() over temp using lapply()\nlapply(temp, extremes_avg)\n\n\n\n# temp is already available in the workspace\ntemp\n# Create a function that returns min and max of a vector: extremes\nextremes = function(v1){\n      return(c(min(v1),max(v1)))\n}\n\nextremes(c(1,2,3))\n\n# Apply extremes() over temp with sapply()\nsapply(temp, extremes)\n\n# Apply extremes() over temp with lapply()\nlapply(temp, extremes)\n\n\n\n# temp is already prepared for you in the workspace\n\n# Create a function that returns all values below zero: below_zero\n\nbelow_zero = function(v){\n      x = v<0\n      return(v[x])\n}\n\n\n# Apply below_zero over temp using sapply(): freezing_s\nfreezing_s = sapply(temp,below_zero)\n\n# Apply below_zero over temp using lapply(): freezing_l\nfreezing_l = lapply(temp,below_zero)\n\n# Compare freezing_s to freezing_l using identical()\nidentical(freezing_s,freezing_l)\n\n\n\n\n\n# Code the basics() function\nbasics = function(x){\n      return(c(min(x),mean(x),max(x)))\n}\n\n# Apply basics() over temp using vapply()\nvapply(temp,basics, numeric(3))\n\n\n# temp is already available in the workspace\n\n# Definition of the basics() function\nbasics <- function(x) {\n      c(min = min(x), mean = mean(x), median = median(x), max = max(x))\n}\n\n# Fix the error:\nvapply(temp, basics, numeric(4))\n\n# temp is already defined in the workspace\n\n# Convert to vapply() expression\nvapply(temp, max, numeric(1))\n\n# Convert to vapply() expression\nvapply(temp, function(x, y) { mean(x) > y }, y = 5, logical(1))\n\n# Definition of get_info (don't change)\nget_info <- function(x, y) { \n      if (mean(x) > y) {\n            return(\"Not too cold!\")\n      } else {\n            return(\"Pretty cold!\")\n      }\n}\n\n# Convert to vapply() expression\nvapply(temp, get_info, y = 5, character(1))\n\n\n\n# work_todos and fun_todos have already been defined\nwork_todos <- c(\"Schedule call with team\", \n                \"Fix error in Recommendation System\", \n                \"Respond to Marc from IT\")\nfun_todos <- c(\"Sleep\", \"Make arrangements for summer trip\")\n\n# Create a list: todos\ntodos = list(work_todos, fun_todos)\ntodos\n\n# Sort the vectors inside todos alphabetically\nsapply(todos, sort)",
    "created" : 1454825552781.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1154109907",
    "id" : "8A531CEC",
    "lastKnownWriteTime" : 1456119196,
    "path" : "F:/sanjana/books/CSE/Machine Learning/Data Camp/Practice/Datacamp-courses/Intermediate R/apply.R",
    "project_path" : "apply.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}