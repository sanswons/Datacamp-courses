?mean
args(mean)
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
avg_li = mean(linkedin)
avg_fa = mean(facebook)
args(avg_li)
args(avg_fa)
avg_li - avg_fa
mean(sum(linkedin)+sum(facebook))
mean(linkedin+facebook)
avg_sum = mean(linkedin+facebook)
(avg_li+avg_fa)/2
avg_sum_trimmed = mean(linkedin+facebook, trim = 0.2)
args(avg_sum)
args(mean)
mean(linkedin, na.rm = TRUE)
mean(linkedin)
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)
mean(linkedin)
mean(linkedin, na.rm = TRUE)
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# Calculate the mean of the sum
avg_sum = mean(linkedin+facebook)
# Calculate the trimmed mean of the sum
avg_sum_trimmed = mean(linkedin+facebook, trim = 0.2)
# Inspect both new variables
avg_sum
avg_sum_trimmed
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)
mean(linkedin)
mean(linkedin, na.rm = TRUE)
abs((mean(linkedin)-linkedin))
abs((mean(linkedin)-linkedin), na.rm=T)
abs((mean(linkedin,, na.rm=T)-linkedin))
mean(abs((mean(linkedin, na.rm=T)-linkedin)))
mean(abs((mean(linkedin, na.rm=T)-linkedin)), , na.rm=T)
mean(abs((mean(linkedin, na.rm=T)-linkedin),, na.rm=T), na.rm=T)
mean(abs((mean(linkedin, na.rm=T)-linkedin), na.rm=T), na.rm=T)
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# Calculate average number of views
avg_li = mean(linkedin)
avg_fb = mean(facebook)
# Inspect avg_li and avg_fb
avg_li
avg_fb
# Calculate the mean of linkedin minus facebook
mean(linkedin-facebook)
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# Calculate the mean of the sum
avg_sum = mean(linkedin+facebook)
# Calculate the trimmed mean of the sum
avg_sum_trimmed = mean(linkedin+facebook, trim = 0.2)
# Inspect both new variables
avg_sum
avg_sum_trimmed
mean(facebook, na.rm = TRUE)
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)
# Basic average of linkedin
mean(linkedin)
# Advanced average of facebook
mean(facebook, na.rm = TRUE)
mean(abs(mean(linkedin, na.rm = T)-linkedin))
mean(abs(mean(linkedin, na.rm = T)-linkedin),na.rm = T)
mean(abs(mean(linkedin-facebook, na.rm = T)-(linkedin-facebook),na.rm = T)
mean(abs(mean(linkedin-facebook, na.rm = T)-(linkedin-facebook)),na.rm = T)
pow_two = function(x){
x*X
}
# Use the function
pow_two(2)
pow_two = function(x){
x*x
}
# Use the function
pow_two(2)
# Create a function sum_abs()
sum_abs = function(a,b){
abs(a)+abs(b)
}
# Use the function
sum_abs(-2,3)
hello = function(){
print("Hello")
return(TRUE)
}
# Call the function hello()
hello()
# Define the function my_filter()
my_filter = function(z){
x
return(NULL)
}
# Call the function my_filter() twice
my_filter(5)
my_filter(-5)
my_filter = function(z){
z
return(NULL)
}
# Call the function my_filter() twice
my_filter(5)
my_filter(-5)
my_filter = function(z){
if(z>0){
return z
} else {
return(NULL)
my_filter = function(z){
if(z>0){
return z
} else {
return(NULL)
}
}
my_filter = function(z){
if(z>0){
return(z)
} else {
return(NULL)
}
}
my_filter(5)
my_filter(-5)
pow_two <- function(x, print_info = TRUE) {
if (print_info==TRUE){
print(paste(x,"to the power of two equals",y))
}
x ^ 2
}
pow_two(4)
pow_two(4)
pow_two <- function(x, print_info = TRUE) {
if (print_info==TRUE){
print(paste(x ."to the power of two equals". y))
}
x ^ 2
}
pow_two(4)
pow_two <- function(x, print_info = TRUE) {
if (print_info==TRUE){
print(paste(x +"to the power of two equals"+ y))
}
x ^ 2
}
pow_two(4)
?paste
pow_two <- function(x, print_info = TRUE) {
if (print_info==TRUE){
print(paste(x , "to the power of two equals", x^2))
}
x ^ 2
}
pow_two(4)
pow_two(4, FALSE)
pow_two <- function(x) {
y <- x ^ 2
return(y)
}
pow_two(4)
y
x
two_dice <- function() {
possibilities <- 1:6
dice1 <- sample(possibilities, size = 1)
dice2 <- sample(possibilities, size = 1)
dice1 + dice2
}
two_dice()
res = two_dice()
res
dice1
triple <- function(x) {
x <- 3*x
x
}
a <- 5
triple(a)
a
increment <- function(x, inc = 1) {
x <- x + inc
x
}
count <- 5
a <- increment(count, 2)
b <- increment(count)
count <- increment(count, 2)
a
b
count
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
interpret = function(x){
if(x>15){
print("You're popular!")
}else{
print("Try to be more visible!")
}
}
interpret(linkedin)
interpret(linkedin[1])
interpret(facebook[2])
interpret = function(x){
if(x>15){
print("You're popular!")
return(x)
}else{
print("Try to be more visible!")
return(0)
}
}
interpret(linkedin[1])
interpret(facebook[2])
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# The interpret() can be used inside interpret_all()
interpret <- function(num_views) {
if (num_views > 15) {
print("You're popular!")
return(num_views)
} else {
print("Try to be more visible!")
return(0)
}
}
interpret_all = function(v, r) {
total = 0
for i in v{
x = interpret(i)
total=total+x
}
if(r==NULL){
return(NULL)
}else{
return(total)
}
}
# Define the interpret_all() function
interpret_all = function(v, r=TRUE) {
total = 0
for i in v{
x = interpret(i)
total=total+x
}
if(r==NULL){
return(NULL)
}else{
return(total)
}
}
interpret_all = function(v, r=TRUE) {
total = 0
for i in v{
interpret_all = function(v, r=TRUE){
total = 0
for (i in v){
x = interpret(i)
total=total+x
}
if(r==NULL){
return(NULL)
}else{
return(total)
}
}
interpret_all(linkedin)
# Define the interpret_all() function
interpret_all = function(v, r=TRUE){
total = 0
for (i in v){
x = interpret(i)
total=total+x
}
if(r==TRUE){
return(total)
}else{
return(NULL)
}
}
interpret_all(linkedin)
interpret_all(facebook)
search()
wt <- mtcars$wt
hp <- mtcars$hp
qplot(wt,hp)
library(ggvis)
qplot(wt,hp)
library(ggplot2)
qplot(wt,hp)
search()
library(data.table)
require(ggvis)
library("data.table")
require(ggvis)
library(data.table)
require(ggvis, character.only = TRUE)
library(c("data.table", "ggvis"))
split_math = strsplit(pioneers,split = ":")
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split_math = strsplit(pioneers,split = ":")
lapply(split_math, tolower)
split_low=lapply(split_math, tolower)
str(split_low)
split_low=lapply(split_math, tolower)
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
lapply(split_low, select_first)
select_first = function(x){
return(x[1])
}
names = lapply(split_low, select_first)
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
function(x){
tolower(split)
}
years <- lapply(split_low, names)
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, function(x){tolower
x[1]})
names <- lapply(split_low, function(x){x[2]})
years <- lapply(split_low, names)
years
names
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split_low <- lapply(split, function(x){tolower
x[1]})
split_low
split_low <- lapply(split,tolower, function(x){
x[1]})
split_low
split_low <- lapply(split, function(x){x[1]})
split_low
names <- lapply(split_low, function(x){x[2]})
names
names <- lapply(split, function(x){x[2]})
names
years <- lapply(split_low, names)
years
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
# Replace the select_*() functions by a single function: select_el
select_el = function(v, index){
v[index]
}
names = select_el(split_low, 1)
years = select_el(split_low, 2)
names
years = select_el(split_low, 2)
years
names =lapply(split_low, select_el, 1)
years = lapply(split_low, select_el, 2)
names
years
abs(9)
abs(-9)
round(1.2)
round(1.5)
round(-1.5)
round(-1.1)
sum(1,3,5)
mean(16,67)
mean(c(16,67))
seq(1,19, by = 6)
seq(1,18, by = 6)
seq(1,18, by = -6)
seq(89,18, by = -6)
rep(seq(89,18, by = -6), times = 2)
sort(rep(seq(89,18, by = -6), times = 2))
Sys.Date()
Sys.Date()
Sys.time()
as.Date("1995-08-32")
as.Date("1995-08-29")
as.Date("1995-02-29")
as.Date("1994-02-29")
as.Date("2016-02-29")
as.Date("1996-02-29")
